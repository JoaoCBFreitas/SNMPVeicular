/*
 * Note: this file originally auto-generated by mib2c
 * using mib2c.array-user.conf
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef REQUESTMONITORINGDATATABLE_H
#define REQUESTMONITORINGDATATABLE_H

#ifdef __cplusplus
extern "C"
{
#endif

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>
#include "../genericTypesTable/genericTypesTable.h"
#include "../mapTypeTable/mapTypeTable.h"
#include "../capabilitiesTable/capabilitiesTable.h"
#include "../sampleUnitsTable/sampleUnitsTable.h"
#include "../requestControlDataTable/requestControlDataTable.h"
#include "../requestStatisticsDataTable/requestStatisticsDataTable.h"
#include "../samplesTable/samplesTable.h"
#include "../sampledValuesTable/sampledValuesTable.h"

    typedef struct requestMonitoringStruct
    {
        int reqID;
        int genericRequestID;
        int statisticsRequestID;
        int savingMode;
        int sampleFreq;
        int maxDelay;
        char *startTime;
        char *endTime;
        char *durationTime;
        char *expireTime;
        int maxNofSamples;
        int lastSampleID;
        int loopmode;
        int nofSamples;
        int status;

    } requestMonitoringStruct;
    typedef struct requestMonitoringList
    {
        int capacity;
        int current;
        requestMonitoringStruct *requestList;
    } requestMonitoringList;
    /** Index requestID is internal */

    typedef struct requestMonitoringDataTable_context_s
    {
        netsnmp_index index; /** THIS MUST BE FIRST!!! */
        oid oid_buf[2];
        unsigned long requestID;            /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long genericRequestTypeID; /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long requestStatisticsID;  /** UNSIGNED32 = ASN_UNSIGNED */
        long savingMode;                    /** INTEGER = ASN_INTEGER */
        unsigned long samplingFrequency;    /** UNSIGNED32 = ASN_UNSIGNED */
        long maxDelay;                      /** INTEGER = ASN_INTEGER */
        unsigned char startTime[65535];     /** OBUDateandTime = ASN_OCTET_STR */
        long startTime_len;
        unsigned char endTime[65535]; /** OBUDateandTime = ASN_OCTET_STR */
        long endTime_len;
        unsigned char durationTime[65535]; /** OBUDateandTime = ASN_OCTET_STR */
        long durationTime_len;
        unsigned char expireTime[65535]; /** OBUDateandTime = ASN_OCTET_STR */
        long expireTime_len;
        unsigned long maxNOfSamples; /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long lastSampleID;  /** UNSIGNED32 = ASN_UNSIGNED */
        long loopMode;               /** INTEGER = ASN_INTEGER */
        unsigned long nOfSamples;    /** COUNTER = ASN_COUNTER */
        long status;                 /** INTEGER = ASN_INTEGER */
        void *data;
        int valid;
    } requestMonitoringDataTable_context;

    /*************************************************************
 * function declarations
 */
    void init_requestMonitoringDataTable(void);
    void initialize_table_requestMonitoringDataTable(void);
    const requestMonitoringDataTable_context *requestMonitoringDataTable_get_by_idx(netsnmp_index *);
    const requestMonitoringDataTable_context *requestMonitoringDataTable_get_by_idx_rs(netsnmp_index *,
                                                                                       int row_status);
    int requestMonitoringDataTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);

    /*************************************************************
 * oid declarations
 */
    extern const oid requestMonitoringDataTable_oid[];
    extern const size_t requestMonitoringDataTable_oid_len;

#define requestMonitoringDataTable_TABLE_OID 1, 3, 6, 1, 3, 8888, 1

/*************************************************************
 * column number definitions for table requestMonitoringDataTable
 */
#define COLUMN_REQUESTID 1
#define COLUMN_GENERICREQUESTTYPEID 2
#define COLUMN_REQUESTSTATISTICSID 3
#define COLUMN_SAVINGMODE 4
#define COLUMN_SAMPLINGFREQUENCY 5
#define COLUMN_MAXDELAY 6
#define COLUMN_STARTTIME 7
#define COLUMN_ENDTIME 8
#define COLUMN_DURATIONTIME 9
#define COLUMN_EXPIRETIME 10
#define COLUMN_MAXNOFSAMPLES 11
#define COLUMN_LASTSAMPLEID 12
#define COLUMN_LOOPMODE 13
#define COLUMN_NOFSAMPLES 14
#define COLUMN_STATUS 15
#define requestMonitoringDataTable_COL_MIN 1
#define requestMonitoringDataTable_COL_MAX 15

/* comment out the following line if you don't handle SET-REQUEST for requestMonitoringDataTable */
#define requestMonitoringDataTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define requestMonitoringDataTable_ROW_CREATION

    /* comment out the following line if you don't want the secondary index */
    /* #define requestMonitoringDataTable_IDX2  */

#ifdef requestMonitoringDataTable_SET_HANDLING

    int requestMonitoringDataTable_extract_index(requestMonitoringDataTable_context *ctx, netsnmp_index *hdr);

    void requestMonitoringDataTable_set_reserve1(netsnmp_request_group *);
    void requestMonitoringDataTable_set_reserve2(netsnmp_request_group *);
    void requestMonitoringDataTable_set_action(netsnmp_request_group *);
    void requestMonitoringDataTable_set_commit(netsnmp_request_group *);
    void requestMonitoringDataTable_set_free(netsnmp_request_group *);
    void requestMonitoringDataTable_set_undo(netsnmp_request_group *);
    int requestMonitoringDataTable_row_copy(requestMonitoringDataTable_context *, requestMonitoringDataTable_context *);
    requestMonitoringDataTable_context *requestMonitoringDataTable_duplicate_row(requestMonitoringDataTable_context *);
    netsnmp_index *requestMonitoringDataTable_delete_row(requestMonitoringDataTable_context *);

    int requestMonitoringDataTable_can_delete(requestMonitoringDataTable_context *undo_ctx,
                                              requestMonitoringDataTable_context *row_ctx,
                                              netsnmp_request_group *rg);

#ifdef requestMonitoringDataTable_ROW_CREATION
    requestMonitoringDataTable_context *requestMonitoringDataTable_create_row(netsnmp_index *, requestMonitoringStruct *);
#endif
#endif

#ifdef requestMonitoringDataTable_IDX2
    requestMonitoringDataTable_context *requestMonitoringDataTable_get(const char *name, int len);
#endif

#ifdef __cplusplus
}
#endif

#endif /** REQUESTMONITORINGDATATABLE_H */
