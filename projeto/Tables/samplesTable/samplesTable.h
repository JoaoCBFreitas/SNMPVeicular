/*
 * Note: this file originally auto-generated by mib2c
 * using mib2c.array-user.conf
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef SAMPLESTABLE_H
#define SAMPLESTABLE_H

#ifdef __cplusplus
extern "C"
{
#endif

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>
#include <assert.h>
#include <stdio.h>
#include <time.h>
    /** Index sampleID is internal */
    typedef struct samplesStruct
    {
        int sampleID;
        int requestSampleID;
        char *timestamp;
        int sampleValueID;
        int sampleFrequency;
        int previousSampleID;
    } samplesStruct;
    typedef struct samplesTable_context_s
    {
        netsnmp_index index; /** THIS MUST BE FIRST!!! */
        oid oid_buf[2];
        unsigned long sampleID;         /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long requestSampleID;  /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned char timeStamp[65535]; /** OBUDateandTime = ASN_OCTET_STR */
        long timeStamp_len;
        unsigned long sampleValueID;    /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long sampleFrequency;  /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long previousSampleID; /** UNSIGNED32 = ASN_UNSIGNED */
        int valid;
        void *data;

    } samplesTable_context;

    /*************************************************************
 * function declarations
 */
    void init_samplesTable(void);
    void initialize_table_samplesTable(void);
    const samplesTable_context *samplesTable_get_by_idx(netsnmp_index *);
    const samplesTable_context *samplesTable_get_by_idx_rs(netsnmp_index *,
                                                           int row_status);
    int samplesTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);
    int insertSamplesRow(samplesStruct*);
    int firstSampleEntry();
    int deleteSamplesEntry(int);
    samplesTable_context* getSampleEntry(int);
    /*************************************************************
 * oid declarations
 */
    extern const oid samplesTable_oid[];
    extern const size_t samplesTable_oid_len;

#define samplesTable_TABLE_OID 1, 3, 6, 1, 3, 8888, 5

/*************************************************************
 * column number definitions for table samplesTable
 */
#define COLUMN_SAMPLEID 1
#define COLUMN_REQUESTSAMPLEID 2
#define COLUMN_TIMESTAMP 3
#define COLUMN_SAMPLEVALUEID 4
#define COLUMN_SAMPLEFREQUENCY 5
#define COLUMN_PREVIOUSSAMPLEID 6
#define samplesTable_COL_MIN 1
#define samplesTable_COL_MAX 6

/* comment out the following line if you don't handle SET-REQUEST for samplesTable */
#define samplesTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define samplesTable_ROW_CREATION

    /* comment out the following line if you don't want the secondary index */
    /* #define samplesTable_IDX2  */

#ifdef samplesTable_SET_HANDLING

    int samplesTable_extract_index(samplesTable_context *ctx, netsnmp_index *hdr);

    void samplesTable_set_reserve1(netsnmp_request_group *);
    void samplesTable_set_reserve2(netsnmp_request_group *);
    void samplesTable_set_action(netsnmp_request_group *);
    void samplesTable_set_commit(netsnmp_request_group *);
    void samplesTable_set_free(netsnmp_request_group *);
    void samplesTable_set_undo(netsnmp_request_group *);
    int samplesTable_row_copy(samplesTable_context *, samplesTable_context *);
    samplesTable_context *samplesTable_duplicate_row(samplesTable_context *);
    netsnmp_index *samplesTable_delete_row(samplesTable_context *);

    int samplesTable_can_delete(samplesTable_context *undo_ctx,
                                samplesTable_context *row_ctx,
                                netsnmp_request_group *rg);

#ifdef samplesTable_ROW_CREATION
    samplesTable_context *samplesTable_create_row(netsnmp_index *, samplesStruct *);
#endif
#endif

#ifdef samplesTable_IDX2
    samplesTable_context *samplesTable_get(const char *name, int len);
#endif

#ifdef __cplusplus
}
#endif

#endif /** SAMPLESTABLE_H */
