/*
 * Note: this file originally auto-generated by mib2c
 * using mib2c.array-user.conf
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef MAPTYPETABLE_H
#define MAPTYPETABLE_H

#ifdef __cplusplus
extern "C"
{
#endif
#include <regex.h>
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>
#include "../../auxFunc.h"
#include "../../SocketCAN/canReceive.h"
    /** Index mapTypeID is internal */

    typedef struct mapTypeTable_context_s
    {
        netsnmp_index index; /** THIS MUST BE FIRST!!! */
        oid oid_buf[2];
        unsigned long mapTypeID;            /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long proprietaryTypeID;    /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long genericMapTypeID;     /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long sampleUnitMapID;      /** UNSIGNED32 = ASN_UNSIGNED */
        long precision;                     /** INTEGER = ASN_INTEGER */
        unsigned long maxSamplingFrequency; /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long maxMapDelay;          /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned char dataSource[65535];    /** OCTETSTR = ASN_OCTET_STR */
        long dataSource_len;
        unsigned char interfaceSource[65535]; /** OCTETSTR = ASN_OCTET_STR */
        long interfaceSource_len;
        void *data;
        int valid;

    } mapTypeTable_context;

    /*************************************************************
 * function declarations
 */
    void init_mapTypeTable(BO_List *);
    void initialize_table_mapTypeTable(void);
    const mapTypeTable_context *mapTypeTable_get_by_idx(netsnmp_index *);
    const mapTypeTable_context *mapTypeTable_get_by_idx_rs(netsnmp_index *,
                                                           int row_status);
    int mapTypeTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);
    mapTypeTable_context* findRow(unsigned long );
    /*************************************************************
 * oid declarations
 */
    extern const oid mapTypeTable_oid[];
    extern const size_t mapTypeTable_oid_len;

#define mapTypeTable_TABLE_OID 1, 3, 6, 1, 3, 8888, 6

/*************************************************************
 * column number definitions for table mapTypeTable
 */
#define COLUMN_MAPTYPEID 1
#define COLUMN_PROPRIETARYTYPEID 2
#define COLUMN_GENERICMAPTYPEID 3
#define COLUMN_SAMPLEUNITMAPID 4
#define COLUMN_PRECISION 5
#define COLUMN_MAXSAMPLINGFREQUENCY 6
#define COLUMN_MAXMAPDELAY 7
#define COLUMN_DATASOURCE 8
#define COLUMN_INTERFACESOURCE 9
#define mapTypeTable_COL_MIN 1
#define mapTypeTable_COL_MAX 9

/* comment out the following line if you don't handle SET-REQUEST for mapTypeTable */
#define mapTypeTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define mapTypeTable_ROW_CREATION

    /* comment out the following line if you don't want the secondary index */
    /* #define mapTypeTable_IDX2  */

#ifdef mapTypeTable_SET_HANDLING

    int mapTypeTable_extract_index(mapTypeTable_context *ctx, netsnmp_index *hdr);

    void mapTypeTable_set_reserve1(netsnmp_request_group *);
    void mapTypeTable_set_reserve2(netsnmp_request_group *);
    void mapTypeTable_set_action(netsnmp_request_group *);
    void mapTypeTable_set_commit(netsnmp_request_group *);
    void mapTypeTable_set_free(netsnmp_request_group *);
    void mapTypeTable_set_undo(netsnmp_request_group *);
    int mapTypeTable_row_copy(mapTypeTable_context *, mapTypeTable_context *);
    mapTypeTable_context *mapTypeTable_duplicate_row(mapTypeTable_context *);
    netsnmp_index *mapTypeTable_delete_row(mapTypeTable_context *);

    int mapTypeTable_can_delete(mapTypeTable_context *undo_ctx,
                                mapTypeTable_context *row_ctx,
                                netsnmp_request_group *rg);

#ifdef mapTypeTable_ROW_CREATION
    mapTypeTable_context *mapTypeTable_create_row(netsnmp_index *, char *, char *, int, int, int, int, int, int, int);
#endif
#endif

#ifdef mapTypeTable_IDX2
    mapTypeTable_context *mapTypeTable_get(const char *name, int len);
#endif

#ifdef __cplusplus
}
#endif

#endif /** MAPTYPETABLE_H */
