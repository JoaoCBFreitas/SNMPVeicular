/*
 * Note: this file originally auto-generated by mib2c
 * using mib2c.array-user.conf
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef COMMANDTABLE
#define COMMANDTABLE

#ifdef __cplusplus
extern "C"
{
#endif

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>
#include <net/if.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <linux/can.h>
#include <linux/can/raw.h>
#include "../commandTemplateTable/commandTemplateTable.h"
#include "../errorTable/errorTable.h"
    /** Index commandID is internal */

    typedef struct commandTable_context_s
    {
        netsnmp_index index; /** THIS MUST BE FIRST!!! */
        oid oid_buf[2];
        unsigned long commandID;                      /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long templateID;                     /** UNSIGNED32 = ASN_UNSIGNED */
        long commandInput;                            /** INTEGER = ASN_INTEGER */
        unsigned char commandUser[MAXSNMPSTRINGSIZE]; /** OBUDateandTime = ASN_OCTET_STR */
        long commandUser_len;
        void *data;
        int valid;
    } commandTable_context;

    /*************************************************************
 * function declarations
 */
    void init_commandTable(void);
    void initialize_table_commandTable(void);
    const commandTable_context *commandTable_get_by_idx(netsnmp_index *);
    const commandTable_context *commandTable_get_by_idx_rs(netsnmp_index *,
                                                           int row_status);
    int commandTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);
    void checkActuators(void);
    /*************************************************************
 * oid declarations
 */
    extern const oid commandTable_oid[];
    extern const size_t commandTable_oid_len;

#define commandTable_TABLE_OID 1, 3, 6, 1, 3, 8888, 12

/*************************************************************
 * column number definitions for table commandTable
 */
#define COLUMN_COMMANDID 1
#define COLUMN_TEMPLATEID 2
#define COLUMN_COMMANDINPUT 3
#define COLUMN_COMMANDUSER 4
#define commandTable_COL_MIN 1
#define commandTable_COL_MAX 4

/* comment out the following line if you don't handle SET-REQUEST for commandTable */
#define commandTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define commandTable_ROW_CREATION

    /* comment out the following line if you don't want the secondary index */
    /* #define commandTable_IDX2  */

#ifdef commandTable_SET_HANDLING

    int commandTable_extract_index(commandTable_context *ctx, netsnmp_index *hdr);

    void commandTable_set_reserve1(netsnmp_request_group *);
    void commandTable_set_reserve2(netsnmp_request_group *);
    void commandTable_set_action(netsnmp_request_group *);
    void commandTable_set_commit(netsnmp_request_group *);
    void commandTable_set_free(netsnmp_request_group *);
    void commandTable_set_undo(netsnmp_request_group *);
    int commandTable_row_copy(commandTable_context *, commandTable_context *);
    commandTable_context *commandTable_duplicate_row(commandTable_context *);
    netsnmp_index *commandTable_delete_row(commandTable_context *);

    int commandTable_can_delete(commandTable_context *undo_ctx,
                                commandTable_context *row_ctx,
                                netsnmp_request_group *rg);

#ifdef commandTable_ROW_CREATION
    commandTable_context *commandTable_create_row(netsnmp_index *);
#endif
#endif

#ifdef commandTable_IDX2
    commandTable_context *commandTable_get(const char *name, int len);
#endif

#ifdef __cplusplus
}
#endif

#endif /** COMMANDTABLE */
