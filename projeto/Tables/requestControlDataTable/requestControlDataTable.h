/*
 * Note: this file originally auto-generated by mib2c
 * using mib2c.array-user.conf
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef REQUESTCONTROLDATATABLE_H
#define REQUESTCONTROLDATATABLE_H

#ifdef __cplusplus
extern "C"
{
#endif

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>
    typedef struct requestStruct
    {
        int reqID;
        int genericID;
        int settingMode;
        char *commitTime;
        char *waitTime;
        char *endTime;
        char *duration;
        char *expireTime;
        int valuesTable;
        int valueID;
        int status;

    } requestStruct;
    /** Index requestControlID is internal */

    typedef struct requestControlDataTable_context_s
    {
        netsnmp_index index; /** THIS MUST BE FIRST!!! */
        oid oid_buf[2];
        unsigned long requestControlID;            /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long genericRequestControlTypeID; /** UNSIGNED32 = ASN_UNSIGNED */
        long settingMode;                          /** INTEGER = ASN_INTEGER */
        unsigned char commitTime[65535];           /** OBUDateandTime = ASN_OCTET_STR */
        long commitTime_len;
        unsigned char waitTime[65535]; /** OBUDateandTime = ASN_OCTET_STR */
        long waitTime_len;
        unsigned char endControlTime[65535]; /** OBUDateandTime = ASN_OCTET_STR */
        long endControlTime_len;
        unsigned char durationControlTime[65535]; /** OBUDateandTime = ASN_OCTET_STR */
        long durationControlTime_len;
        unsigned char expireControlTime[65535]; /** OBUDateandTime = ASN_OCTET_STR */
        long expireControlTime_len;
        unsigned long valuesTableID; /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long valuesID;      /** UNSIGNED32 = ASN_UNSIGNED */
        long statusControl;          /** INTEGER = ASN_INTEGER */
        void *data;
        int valid;
    } requestControlDataTable_context;

    /*************************************************************
 * function declarations
 */
    void init_requestControlDataTable(void);
    void initialize_table_requestControlDataTable(void);
    const requestControlDataTable_context *requestControlDataTable_get_by_idx(netsnmp_index *);
    const requestControlDataTable_context *requestControlDataTable_get_by_idx_rs(netsnmp_index *,
                                                                                 int row_status);
    int requestControlDataTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);
    void* getControlTableID(long unsigned int);
    int insertControlRow(requestStruct *);

    /*************************************************************
 * oid declarations
 */
    extern const oid requestControlDataTable_oid[];
    extern const size_t requestControlDataTable_oid_len;

#define requestControlDataTable_TABLE_OID 1, 3, 6, 1, 3, 8888, 2

/*************************************************************
 * column number definitions for table requestControlDataTable
 */
#define COLUMN_REQUESTCONTROLID 1
#define COLUMN_GENERICREQUESTCONTROLTYPEID 2
#define COLUMN_SETTINGMODE 3
#define COLUMN_COMMITTIME 4
#define COLUMN_WAITTIME 5
#define COLUMN_ENDCONTROLTIME 6
#define COLUMN_DURATIONCONTROLTIME 7
#define COLUMN_EXPIRECONTROLTIME 8
#define COLUMN_VALUESTABLEID 9
#define COLUMN_VALUESID 10
#define COLUMN_STATUSCONTROL 11
#define requestControlDataTable_COL_MIN 1
#define requestControlDataTable_COL_MAX 11

/* comment out the following line if you don't handle SET-REQUEST for requestControlDataTable */
#define requestControlDataTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define requestControlDataTable_ROW_CREATION

    /* comment out the following line if you don't want the secondary index */
    /* #define requestControlDataTable_IDX2  */

#ifdef requestControlDataTable_SET_HANDLING

    int requestControlDataTable_extract_index(requestControlDataTable_context *ctx, netsnmp_index *hdr);

    void requestControlDataTable_set_reserve1(netsnmp_request_group *);
    void requestControlDataTable_set_reserve2(netsnmp_request_group *);
    void requestControlDataTable_set_action(netsnmp_request_group *);
    void requestControlDataTable_set_commit(netsnmp_request_group *);
    void requestControlDataTable_set_free(netsnmp_request_group *);
    void requestControlDataTable_set_undo(netsnmp_request_group *);
    int requestControlDataTable_row_copy(requestControlDataTable_context *, requestControlDataTable_context *);
    requestControlDataTable_context *requestControlDataTable_duplicate_row(requestControlDataTable_context *);
    netsnmp_index *requestControlDataTable_delete_row(requestControlDataTable_context *);

    int requestControlDataTable_can_delete(requestControlDataTable_context *undo_ctx,
                                           requestControlDataTable_context *row_ctx,
                                           netsnmp_request_group *rg);

#ifdef requestControlDataTable_ROW_CREATION
    requestControlDataTable_context *requestControlDataTable_create_row(netsnmp_index *, requestStruct *);
#endif
#endif

#ifdef requestControlDataTable_IDX2
    requestControlDataTable_context *requestControlDataTable_get(const char *name, int len);
#endif

#ifdef __cplusplus
}
#endif

#endif /** REQUESTCONTROLDATATABLE_H */
