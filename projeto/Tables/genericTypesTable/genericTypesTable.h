/*
 * Note: this file originally auto-generated by mib2c
 * using mib2c.array-user.conf
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef GENERICTYPESTABLE_H
#define GENERICTYPESTABLE_H

#ifdef __cplusplus
extern "C"
{
#endif

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

    typedef struct genericTypeStruct
    {
        int genericTypeID;
        long message;
        char *typeDescription;
    } genericTypeStruct;
    typedef struct genericTypeList
    {
        int capacity;
        int current;
        genericTypeStruct *genericList;
    } genericTypeList;
    /** Index genericTypeID is internal */
    typedef struct genericTypesTable_context_s
    {
        netsnmp_index index;                  /** THIS MUST BE FIRST!!! */
        oid oid_buf[2];                       /* We don't have OIDs longer than 2, so we'll just use a short buffer */
        unsigned long genericTypeID;          /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned char typeDescription[65535]; /** OCTETSTR = ASN_OCTET_STR */
        long typeDescription_len;
        int valid;
        void *data;

    } genericTypesTable_context;

    /*************************************************************
 * function declarations
 */
    void init_genericTypesTable(genericTypeList *);
    void initialize_table_genericTypesTable(void);
    const genericTypesTable_context *genericTypesTable_get_by_idx(netsnmp_index *);
    const genericTypesTable_context *genericTypesTable_get_by_idx_rs(netsnmp_index *,
                                                                     int row_status);
    int genericTypesTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);

    /*************************************************************
 * oid declarations
 */
    extern const oid genericTypesTable_oid[];
    extern const size_t genericTypesTable_oid_len;

#define genericTypesTable_TABLE_OID 1, 3, 6, 1, 3, 8888, 7

/*************************************************************
 * column number definitions for table genericTypesTable
 */
#define COLUMN_GENERICTYPEID 1
#define COLUMN_TYPEDESCRIPTION 2
#define genericTypesTable_COL_MIN 1
#define genericTypesTable_COL_MAX 2

/* comment out the following line if you don't handle SET-REQUEST for genericTypesTable */
#define genericTypesTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define genericTypesTable_ROW_CREATION

    /* comment out the following line if you don't want the secondary index */
    /* #define genericTypesTable_IDX2  */

#ifdef genericTypesTable_SET_HANDLING

    int genericTypesTable_extract_index(genericTypesTable_context *ctx, netsnmp_index *hdr);

    void genericTypesTable_set_reserve1(netsnmp_request_group *);
    void genericTypesTable_set_reserve2(netsnmp_request_group *);
    void genericTypesTable_set_action(netsnmp_request_group *);
    void genericTypesTable_set_commit(netsnmp_request_group *);
    void genericTypesTable_set_free(netsnmp_request_group *);
    void genericTypesTable_set_undo(netsnmp_request_group *);
    int genericTypesTable_row_copy(genericTypesTable_context *, genericTypesTable_context *);
    genericTypesTable_context *genericTypesTable_duplicate_row(genericTypesTable_context *);
    netsnmp_index *genericTypesTable_delete_row(genericTypesTable_context *);

    int genericTypesTable_can_delete(genericTypesTable_context *undo_ctx,
                                     genericTypesTable_context *row_ctx,
                                     netsnmp_request_group *rg);

#ifdef genericTypesTable_ROW_CREATION
    genericTypesTable_context *genericTypesTable_create_row(netsnmp_index *, genericTypeStruct);
#endif
#endif

#ifdef genericTypesTable_IDX2
    genericTypesTable_context *genericTypesTable_get(const char *name, int len);
#endif
#ifdef __cplusplus
}
#endif

#endif /** GENERICTYPESTABLE_H */
