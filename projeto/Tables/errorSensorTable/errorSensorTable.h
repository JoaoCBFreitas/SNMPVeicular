/*
 * Note: this file originally auto-generated by mib2c
 * using mib2c.array-user.conf
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef ERRORSENSORTABLE_H
#define ERRORSENSORTABLE_H

#ifdef __cplusplus
extern "C"
{
#endif

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

    typedef struct errorSensorStruct
    {
        int errorSensorID;
        char *errorSensorDescription;
    } errorSensorStruct;
    /** Index errorSensorID is internal */

    typedef struct errorSensorTable_context_s
    {
        netsnmp_index index; /** THIS MUST BE FIRST!!! */
        oid oid_buf[2];
        unsigned long errorSensorID;                 /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned char errorSensorDescription[65535]; /** OCTETSTR = ASN_OCTET_STR */
        long errorSensorDescription_len;
        int valid;
        void *data;
    } errorSensorTable_context;

    /*************************************************************
 * function declarations
 */
    void init_errorSensorTable(void);
    void initialize_table_errorSensorTable(void);
    const errorSensorTable_context *errorSensorTable_get_by_idx(netsnmp_index *);
    const errorSensorTable_context *errorSensorTable_get_by_idx_rs(netsnmp_index *,
                                                                   int row_status);
    int errorSensorTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);

    /*************************************************************
 * oid declarations
 */
    extern const oid errorSensorTable_oid[];
    extern const size_t errorSensorTable_oid_len;

#define errorSensorTable_TABLE_OID 1, 3, 6, 1, 3, 8888, 12

/*************************************************************
 * column number definitions for table errorSensorTable
 */
#define COLUMN_ERRORSENSORID 1
#define COLUMN_ERRORSENSORDESCRIPTION 2
#define errorSensorTable_COL_MIN 1
#define errorSensorTable_COL_MAX 2

//* comment out the following line if you don't handle SET-REQUEST for errorSensorTable */
#define errorSensorTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define errorSensorTable_ROW_CREATION

    /* comment out the following line if you don't want the secondary index */
    /* #define errorSensorTable_IDX2  */

#ifdef errorSensorTable_SET_HANDLING

    int
    errorSensorTable_extract_index(errorSensorTable_context *ctx, netsnmp_index *hdr);

    void errorSensorTable_set_reserve1(netsnmp_request_group *);
    void errorSensorTable_set_reserve2(netsnmp_request_group *);
    void errorSensorTable_set_action(netsnmp_request_group *);
    void errorSensorTable_set_commit(netsnmp_request_group *);
    void errorSensorTable_set_free(netsnmp_request_group *);
    void errorSensorTable_set_undo(netsnmp_request_group *);
    int errorSensorTable_row_copy(errorSensorTable_context *, errorSensorTable_context *);
    errorSensorTable_context *errorSensorTable_duplicate_row(errorSensorTable_context *);
    netsnmp_index *errorSensorTable_delete_row(errorSensorTable_context *);

    int errorSensorTable_can_delete(errorSensorTable_context *undo_ctx,
                                    errorSensorTable_context *row_ctx,
                                    netsnmp_request_group *rg);

#ifdef errorSensorTable_ROW_CREATION
    errorSensorTable_context *errorSensorTable_create_row(netsnmp_index *, errorSensorStruct *);
#endif
#endif

#ifdef errorSensorTable_IDX2
    errorSensorTable_context *errorSensorTable_get(const char *name, int len);
#endif

#ifdef __cplusplus
}
#endif

#endif /** ERRORSENSORTABLE_H */
